#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -euo pipefail

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

AWS_CLI_URL="https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"

BUILD_DIR=$1
ENV_DIR=$3
BUILDPACK_DIR="$(dirname $(dirname $0))"
INSTALL_DIR="/app/.awscli"
TMP_DIR=$(mktemp -d)

echo "-----> Checking env vars"
if [ -f ${ENV_DIR}/ASSETS_AWS_ACCESS_KEY_ID ]; then
  export ASSETS_AWS_ACCESS_KEY_ID="$(cat ${ENV_DIR}/ASSETS_AWS_ACCESS_KEY_ID)"
else
  echo "ASSETS_AWS_ACCESS_KEY_ID not set, skipping S3 asset sync" |& indent
  exit 0
fi
if [ -f ${ENV_DIR}/ASSETS_AWS_SECRET_ACCESS_KEY ]; then
  export ASSETS_AWS_SECRET_ACCESS_KEY="$(cat ${ENV_DIR}/ASSETS_AWS_SECRET_ACCESS_KEY)"
else
  echo "ASSETS_AWS_SECRET_ACCESS_KEY not set, skipping S3 asset sync" |& indent
  exit 0
fi
if [ -f ${ENV_DIR}/ASSETS_AWS_S3_BUCKET ]; then
  export ASSETS_AWS_S3_BUCKET="$(cat ${ENV_DIR}/ASSETS_AWS_S3_BUCKET)"
else
  echo "ASSETS_AWS_S3_BUCKET not set, skipping S3 asset sync" |& indent
  exit 0
fi
if [ -f ${ENV_DIR}/ASSETS_LOCAL_PATH ]; then
  export ASSETS_LOCAL_PATH="$(cat ${ENV_DIR}/ASSETS_LOCAL_PATH)"
else
  echo "ASSETS_LOCAL_PATH not set, skipping S3 asset sync" |& indent
  exit 0
fi

echo "-----> Downloading AWS CLI"
curl --silent --show-error --fail -o "${TMP_DIR}/awscliv2.zip" "${AWS_CLI_URL}" |& indent
unzip -qq -d "${TMP_DIR}" "${TMP_DIR}/awscliv2.zip" |& indent

echo "-----> Installing AWS CLI"
mkdir -p "${BUILD_DIR}/.awscli"

# The AWS installer creates symlinks that use absolute paths, as such the install
# location must match the location from which the CLI is eventually run.
# At runtime the app will be run from /app, however at build time $BUILD_DIR is
# typically a path under /tmp (unless a Heroku CI build, in which case it's /app).
# In order to make all cases work, we have to create a symlink from /app to $BUILD_DIR,
# so that we can use `/app` paths for the installer, so that the symlinks it creates
# will use /app paths. A symlink is used instead of file copying to improve build times.
if [[ "${BUILD_DIR}" != /app ]]; then
  mkdir -p /app
  ln -nsf "${BUILD_DIR}/.awscli" "${INSTALL_DIR}"
fi

"${TMP_DIR}/aws/install" --install-dir "${INSTALL_DIR}/aws-cli" --bin-dir "${INSTALL_DIR}/bin" |& indent
AWS="/app/.awscli/bin/aws"
${AWS} --version |& indent

echo "-----> Configuring AWS CLI credentials"
${AWS} configure set aws_access_key_id ${ASSETS_AWS_ACCESS_KEY_ID}
${AWS} configure set aws_secret_access_key ${ASSETS_AWS_SECRET_ACCESS_KEY}

echo "-----> Uploading ${ASSETS_LOCAL_PATH} to ${ASSETS_AWS_S3_BUCKET}"
if [[ ! -d "${BUILD_DIR}/${ASSETS_LOCAL_PATH}" ]]; then
  echo "${BUILD_DIR}/${ASSETS_LOCAL_PATH} does not exist, skipping S3 asset sync" |& indent
  exit 0
fi
${AWS} s3 sync "${BUILD_DIR}/${ASSETS_LOCAL_PATH}" "s3://${ASSETS_AWS_S3_BUCKET}"

echo "-----> Removing AWS CLI and temporary files"
rm -rf "${TMP_DIR}"
rm -rf "${INSTALL_DIR}"
